program backend;

{$APPTYPE CONSOLE}

{$R *.res}

uses  Horse,
      Horse.Compression,
      Horse.Jhonson, // It's necessary to use the unit
      Horse.BasicAuthentication,
      System.JSON,
      Horse.Commons,
      System.SysUtils;

var
  Users: TJSONArray;

begin

  THorse
    .Use(Compression()) // Must come before Jhonson middleware
    .Use(Jhonson);

  THorse.Use(HorseBasicAuthentication(
    function(const AUsername, APassword: string): Boolean
    begin
      // Here inside you can access your database and validate if username and password are valid
      Result := AUsername.Equals('user') and APassword.Equals('password');
    end));

  Users := TJSONArray.Create;

  THorse.Get('/exception',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      LConteudo: TJSONObject;
    begin
      LConteudo := TJSONObject.Create;
      LConteudo.AddPair('nome', 'ramon');
      Res.Send(LConteudo);
    end);

  THorse.Get('/ping',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      I: Integer;
      LPong: TJSONArray;
    begin
      LPong := TJSONArray.Create;
      for I := 0 to 1000 do
        LPong.Add(TJSONObject.Create(TJSONPair.Create('ping', 'pong')));
      Res.Send(LPong);
    end);

  THorse.Get('/users',
    procedure(Req: THorseRequest; Res: THorseResponse)
    begin
      Res.Send<TJSONAncestor>(Users.Clone);
    end);

  THorse.Post('/users',
    procedure(Req: THorseRequest; Res: THorseResponse)
    var
      User: TJSONObject;
    begin
      User := Req.Body<TJSONObject>.Clone as TJSONObject;
      Users.AddElement(User);
      Res.Send<TJSONAncestor>(User.Clone).Status(THTTPStatus.Created);
    end);

  THorse.Delete('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse)
    var
      id: Integer;
    begin
      Id := Req.Params.Items['id'].ToInteger;
      Users.Remove(Pred(Id)).Free;
      Res.Send<TJSONAncestor>(Users.Clone).Status(THTTPStatus.NoContent);
    end);

  THorse.Listen(9000);
end.
